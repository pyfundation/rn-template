# For basics, see
# https://github.com/osamaq/reactnative-fastlane-appcenter

# -------------Android Build & Deploy-------------#
platform :android do
  # For android, you should setup signing for release builds.
  # Currently, the default debug keystore is used. 
  desc 'Build the staging release APK.'
  private_lane :build_staging_apk do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(
      project_dir: "android/",
      task: "assemble",
      flavor: "Development",
      build_type: "Release"
    )
  end 
  
  desc 'Build the production release APK.'
  private_lane :build_production_apk do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(
      project_dir: "android/",
      task: "assemble",
      build_type: "Release"
    )
  end

  desc 'Build the staging release bundle.'
  private_lane :build_staging_bundle do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(
      project_dir: "android/",
      task: "bundle",
      flavor: "Development",
      build_type: "Release"
    )
  end 

  desc 'Build the product release bundle.'
  private_lane :build_production_bundle do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(
      project_dir: "android/",
      task: "bundle",
      build_type: "Release"
    )
  end 

  desc 'Upload the release APK to App Center.'
  private_lane :upload_apk_app_center do |options|
    release_notes = options[:notes]
    appcenter_upload(
        api_token: ENV["APPCENTER_API_TOKEN"],
        owner_name: ENV["APPCENTER_OWNER_NAME"],
        app_name: ENV["APPCENTER_APP_NAME"],
        file: "./android/app/build/outputs/apk/release/app-release.apk",
        notify_testers: ENV["NOTIFY_TESTERS"],
        destinations: ENV["DESTINATIONS"],
        release_notes: release_notes
        )
  end

  desc 'Upload the release Bundle to App Center.'
  private_lane :upload_bundle_app_center do |options|
    release_notes = options[:notes]
    appcenter_upload(
        api_token: ENV["APPCENTER_API_TOKEN"],
        owner_name: ENV["APPCENTER_OWNER_NAME"],
        app_name: ENV["APPCENTER_APP_NAME"],
        file: "./android/app/build/outputs/bundle/release/app-release.aab",
        notify_testers: ENV["NOTIFY_TESTERS"],
        destinations: ENV["DESTINATIONS"],
        release_notes: release_notes
        )
  end

  desc 'Upload the release Bundle to Google Play Console with Roll out in 50%.'
  private_lane :upload_bundle_play_console do
    upload_to_play_store(
      track: 'production',
      rollout: '0.5',
      aab: "./android/app/build/outputs/bundle/release/app-release.aab"
      )
  end

  desc 'Bump badge and build staging Android APK.'
  lane :bump_badge_build_staging_apk do
    bump_badge
    build_staging_apk
  end

  desc 'Build and deploy staging Android APK.'
  lane :deploy_staging do
    bump_badge_build_staging_apk
    upload_apk_app_center
  end

  desc 'Bump badge and build production Bundle Android.'
  lane :bump_badge_build_production_bundle do
    bump_badge
    build_production_bundle
  end

  desc 'Bump, build and deploy production Bundle Android.'
  lane :deploy_production do
    bump_badge_build_production_bundle
    upload_bundle_app_center
  end
  
end

# -------------iOS Sign, Build & Deploy-------------#
platform :ios do
  # You need to configure singing for iOS
  # https://github.com/osamaq/reactnative-fastlane-appcenter#signing
  desc 'Set up certs and profiles for iOS.'
  lane :certificates do
    register_devices(
      devices: {
        }
    )
    match(
      app_identifier: 'com.app.bundle',
      readonly: true, 
      force_for_new_devices: true, 
      )
  end

  desc 'Build the staging release iOS application.'
  private_lane :build_staging_apk do
    package = load_json(json_path: "./package.json")
    gym(
      scheme: "STAGING",
      workspace: './ios/' + package['name'] + '.xcworkspace', 
      export_method: 'ad-hoc'
    )
  end
  
  desc 'Build the production release iOS application.'
  private_lane :build_production_apk do
    package = load_json(json_path: "./package.json")
    gym(
      scheme: "PRODUCTION",
      workspace: './ios/' + package['name'] + '.xcworkspace', 
      export_method: 'ad-hoc'
    )
  end
  

  desc 'Upload the release IPA to App Center.'
  private_lane :upload do |options|
    release_notes = options[:notes]
    appcenter_upload(
        api_token: ENV["APPCENTER_API_TOKEN"],
        owner_name: ENV["APPCENTER_OWNER_NAME"],
        app_name: ENV["APPCENTER_APP_NAME"],
        ipa: "./" + "Hello App Display Name" + ".ipa",
        notify_testers: ENV["NOTIFY_TESTERS"],
        destinations: ENV["DESTINATIONS"],
        release_notes: release_notes
        )
  end

  desc 'Sign, build, deploy staging iOS.'
  lane :deploy_staging do
    certificates
    build_staging_apk
    upload
  end

  desc 'Sign, build, deploy production iOS.'
  lane :deploy_production do
    certificates
    build_production_apk
    upload
  end

  desc 'Bump, badge, sign, build, deploy staging iOS.'
  lane :bump_badge_deploy_staging do
    bump_badge
    deploy_staging
  end
  
  desc 'Bump, badge, sign, build, deploy production iOS.'
  lane :bump_badge_deploy_prod do
    bump_badge
    deploy_production
  end
end


# -------------Icons & Versioning-------------#
  desc 'Android: Increment versionCode and set versionName to package.json version.'
  package = load_json(json_path: "./package.json")
  private_lane :inc_ver_and do
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
    )

    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: package['version']
    )
  end


  desc 'iOS: Increment build number and set the version to package.json version.'
  private_lane :inc_ver_ios do
    increment_build_number(
      xcodeproj: './ios/' + package['name'] + '.xcodeproj'
    )
    increment_version_number(
      xcodeproj: './ios/' + package['name'] + '.xcodeproj',
      version_number: package['version']
    )
  end


  desc 'Bump build numbers, and set the display version to match the pacakage.json version.'
  private_lane :bump do
    inc_ver_ios
    inc_ver_and
  end


    # To prepare the original icon set, see:
  # https://developer.android.com/studio/write/image-asset-studio
  desc 'Android: Overwrite the current icon set with a badged version.'
  private_lane :make_badge_and do
    package = load_json(json_path: "./package.json")
    add_badge(
      shield: "DEV-" + package['version'] + "-orange", 
      no_badge: true,
      dark: true,
      shield_scale: "0.55",
      shield_gravity: "Center",
      shield_geometry: "+0+30%",
      glob: "/android/app/src/main/res/mipmap-*/ic_launcher*.png",
    )
  end

  # To prepare the original icon set, you can use:
  # https://appicon.co/
  desc 'iOS: Overwrite the current icon set with a badged version.'
  private_lane :make_badge_ios do
    package = load_json(json_path: "./package.json")
    add_badge(
      shield: "DEV-" + package['version'] + "-orange", 
      no_badge: true,
      dark: true,
      shield_scale: "0.85",
      shield_gravity: "South",
      shield_geometry: "+0+5%",
      glob: "/ios/" + package['name'] + "/Images.xcassets/AppIcon.appiconset/*.png",
    )
  end

  desc 'Make new versioned icon badges.'
  lane :make_badge do
    make_badge_ios
    make_badge_and
  end

  desc 'Bump and badge iOS and Android.'
  lane :bump_badge do
    bump
    make_badge
  end